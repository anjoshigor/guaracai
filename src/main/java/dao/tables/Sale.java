/**
 * This class is generated by jOOQ
 */
package dao.tables;


import dao.Keys;
import dao.Public;
import dao.tables.records.SaleRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sale extends TableImpl<SaleRecord> {

    private static final long serialVersionUID = 786932006;

    /**
     * The reference instance of <code>public.sale</code>
     */
    public static final Sale SALE = new Sale();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SaleRecord> getRecordType() {
        return SaleRecord.class;
    }

    /**
     * The column <code>public.sale.id</code>.
     */
    public final TableField<SaleRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('sale_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.sale.date</code>.
     */
    public final TableField<SaleRecord, String> DATE = createField("date", org.jooq.impl.SQLDataType.CHAR.length(8).nullable(false), this, "");

    /**
     * The column <code>public.sale.observation</code>.
     */
    public final TableField<SaleRecord, String> OBSERVATION = createField("observation", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

    /**
     * The column <code>public.sale.total</code>.
     */
    public final TableField<SaleRecord, Float> TOTAL = createField("total", org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>public.sale.discount</code>.
     */
    public final TableField<SaleRecord, Float> DISCOUNT = createField("discount", org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>public.sale.client_id</code>.
     */
    public final TableField<SaleRecord, Integer> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.sale.employee_id</code>.
     */
    public final TableField<SaleRecord, Integer> EMPLOYEE_ID = createField("employee_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.sale</code> table reference
     */
    public Sale() {
        this("sale", null);
    }

    /**
     * Create an aliased <code>public.sale</code> table reference
     */
    public Sale(String alias) {
        this(alias, SALE);
    }

    private Sale(String alias, Table<SaleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sale(String alias, Table<SaleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SaleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SALE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SaleRecord> getPrimaryKey() {
        return Keys.SALE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SaleRecord>> getKeys() {
        return Arrays.<UniqueKey<SaleRecord>>asList(Keys.SALE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SaleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SaleRecord, ?>>asList(Keys.SALE__SALE_EMPLOYEE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sale as(String alias) {
        return new Sale(alias, this);
    }

    /**
     * Rename this table
     */
    public Sale rename(String name) {
        return new Sale(name, null);
    }
}
